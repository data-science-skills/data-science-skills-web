[
  {
    "objectID": "index.html#get-started-using-git-bash-and-python",
    "href": "index.html#get-started-using-git-bash-and-python",
    "title": "Data Science Skills",
    "section": "Get started using git, bash and Python",
    "text": "Get started using git, bash and Python\n\nLearn how to get started using Python and conda.\nUp your game using Git and GitHub\n\n\nInstall Python"
  },
  {
    "objectID": "install-python/why-use-conda-for-science.html",
    "href": "install-python/why-use-conda-for-science.html",
    "title": "Why Conda is Better for Scientific Environments",
    "section": "",
    "text": "Understand how dependency management can play a large role in Python programming.\nExplain how to use conda environments to manage your third party libraries."
  },
  {
    "objectID": "install-python/why-use-conda-for-science.html#conda-environments-in-python",
    "href": "install-python/why-use-conda-for-science.html#conda-environments-in-python",
    "title": "Why Conda is Better for Scientific Environments",
    "section": "Conda Environments in Python",
    "text": "Conda Environments in Python\n\nThe Third Party Library Issue\nMost projects written in Python require a certain set of third party libraries that are not in the Python standard library. There is a good chance you have used at least one of these libraries such as numpy, matplotlib, or pandas.\nThird party libraries are critical to making Python the great tool it is. Developers and scientists all over the world are constantly improving and adding to the functionality Python provides by writing new packages. When you require one of these third party libraries in your workflow, they are called dependencies because your workflow depends on them to function.\nWhile having a plethora of open source functionality available to the community is one of Python’s greatest strengths, dependency management is a major challenge for many Python programmers. This is especially true for Python programmers who are not dedicated software engineers!\nIn Python, regardless of what project you are working on, your computer will store third party libraries in the same location. This means that if you depend on GDAL 2.4.2 in an older project and GDAL 3.0.1 in your brand new project, you will need a way to store these dependencies separately. If they aren’t stored separately, Python will not be able to tell the difference between the two that are both installed in the same location.\n\n\n\n\n\nDependency conflicts can cause significant issues when working with Python. Conda allows you to install multiple environments on your computer and to address dependency issues. Image from XKCD Webcomic. Licensed here: https://xkcd.com/license.html.\n\n\n\n\nPython Environments\nA Python environment is a dedicated directory where specific dependencies can be stored and maintained. Environments have unique names and can be activated when you need them, allowing you to have ultimate control over the libraries that are installed at any given time.\nYou can create as many environments as you want. Because each one is independent, they will not interact or “mess up” the other. Thus, it is common for programmers to create new environments for each project that they work on.\nOften times, information about your environment can assist you in debugging certain errors. Starting with a clean environment for each project can help you control the number of variables to consider when looking for bugs.\nBroadly, you have two package managers to choose from when creating a Python environment:\n\nYou can create a virtual environment (venv) using pip to install packages or\nYou can create a conda environment using mamba installing packages for you.\n\nOn this page, you will learn about conda environments. For science applications conda environments have several strengths compared to **pip* environments."
  },
  {
    "objectID": "install-python/why-use-conda-for-science.html#what-is-conda",
    "href": "install-python/why-use-conda-for-science.html#what-is-conda",
    "title": "Why Conda is Better for Scientific Environments",
    "section": "What is Conda",
    "text": "What is Conda\nConda is a package and environment management tool that allows you to install Python packages on your computer as well as create and manage multiple Python environments, each containing different packages.\nWhile you will predominately use conda for the installation and management of Python libraries, it is important to note that conda can install and manage software of many different languages; this can be important when working with external dependencies that aren’t built in Python."
  },
  {
    "objectID": "install-python/why-use-conda-for-science.html#why-conda",
    "href": "install-python/why-use-conda-for-science.html#why-conda",
    "title": "Why Conda is Better for Scientific Environments",
    "section": "Why Conda",
    "text": "Why Conda\nAs mentioned previously, when it comes to installing packages you have two options: pip and conda.\nPip stands for Pip Installs Packages and is the default package manager available in Python. Conda, on the other hand, is an environment manager that aims to do what pip does with added functionality.\nThere are several reasons that make conda such a strong contender for managing your Python environments over pip.\n\n1. Conda is Cross Platform\nLibraries available on conda are stored on the Anaconda Cloud and can easily be installed on any system. Conda libraries are stored as binary files, which makes them easy for conda to unpack anywhere you have Anaconda, Miniforge or Mambaforge installed.\nPip packages, on the other hand, are stored in a more more complex way (as wheels or source distributions). This storage format requires a compiler to unpack. This means that you need to have Python installed to install packages with pip, which brings up the next point.\n\n\n2. Conda Can Install Specific Versions of Python\nConda allows you to install and run a specific version of Python. Anything installed with pip requires a wheel or source distribution for the Python compiler to break down.\nUnfortunately, this means that pip cannot directly install versions of Python. It also means that you have to install your preferred Python distribution before even starting the process of working with a new virtual environment.\n\n\n3. Environments are Native to Conda\nAs discussed previously, when using pip, you must use a virtual environment as your environment for managing dependencies. However, virtualenv is a Python library itself. With some configuration and other wrappers, virtual environments can provide a satisfactory development environment. However, when you use conda, environments are available to you without needing to install an additional tool.\n\n\n4. Conda is Better at Dependency Management\nPip makes no attempt to check if all of your dependencies are satisfied at once. Instead, pip may allow incompatible dependencies to be installed depending on the order you install packages.\nConda instead uses what they call a “satisfiability solver”, which checks that all dependencies are met at all times. This comes with a performance hit due to having to comb through every dependency on each install, but will save you headaches down the road.\n\n\n5. Conda Manages External Dependencies\nPip is lacking when it comes to managing and tracking external dependencies and accessing all of the available libraries out there.\nGDAL is a prime example of a package that can be installed easily through conda, but is difficult to install any other way. Part of this is due to the fact that GDAL is not a native Python application, and conda has a much easier time dealing with that.\nWhile you may prefer using conda, there is no clear consensus whether pip or conda are better.\nWhile they both install packages, conda is very different than pip. Conda can do much more than pip at the cost of increased complexity.\nFor a simple workflow, the benefits of conda may not be worth the extra effort to get up and running. For working with geospatial libraries, conda is definitely preferred, given it’s ability to resolve dependency issues associated with GDAL.\n\n\n\n\n\n\nData Tip\n\n\n\nSometimes Python libraries are on Github.com. You can install Python libraries from Github.com using pip install git+git://github.com/path-to-github-user/repo-name.git"
  },
  {
    "objectID": "install-python/why-use-conda-for-science.html#channels-in-conda",
    "href": "install-python/why-use-conda-for-science.html#channels-in-conda",
    "title": "Why Conda is Better for Scientific Environments",
    "section": "Channels in Conda",
    "text": "Channels in Conda\nAbove you learned about the differences between using pip vs conda to install Python packages. However, there are also different channels available in conda that you can use to install packages into your conda environment.\nBelow, you will learn about the conda-forge channel which is an alternative to the default conda channel. This is the channel that you should use as your primary “go to” installation channel, when setting up your Python environment for scientific applications.\nThere are two main conda channels that you should consider: * conda: this is the default repository that is used and maintained for the Anaconda distribution of Python. To install libraries from conda, you use the syntax conda install package-name at the command line. * conda-forge: This channel is community maintained, and we have found that installing many of the spatial packages using conda-forge will minimize conflicts between packages. To install libraries from conda-forge, you use the syntax conda install -c conda-forge package-name at the command line.\n\n\n\n\n\n\nNote\n\n\n\nNote: bioconda is another channel that is widely used in science but we are not going to discuss that channel in this tutorial.\n\n\nFor consistency, we suggest that always use the conda-forge repository when you install packages in a conda environment. However in some cases, a package may not be on conda. In these instances you may be forced to use pip.\n\n\n\n\n\nYou can think about a channel as a bucket of tools that are all located on the same server / in the same main directory. The three main Python channels are conda default (managed by Anaconda), conda-forge and bioconda. Image Source: https://geohackweek.github.io/datasharing/01-conda-tutorial/.\n\n\n\nDefault Channels\nConda doesn’t just have a single repository where all uploaded packages live. When a package is uploaded to conda, it must be uploaded to a specific channel, which is just a separate URL where packages published to that channel reside.\nThere is a default conda channel where the stock conda packages live. These packages are maintained by conda and are generally very stable. If you do not specify channels in your configuration settings, whenever you run conda install x, conda will search its default channel for that package; if the package isn’t on that channel, it will throw an error.\nYou want to specify one channel (e.g. conda-forge) as often as you can to avoid problems that arise with mixing channels. Much like having two different versions of GDAL installed in the same place, mixing channels can confuse conda’s satisfiability solver for managing dependencies.\nThe resulting errors can make it look like you have a package installed; however, Python will fail to find dependencies when you run it.\n\n\nConda-Forge\nThe Python community has responded to this mixing channel issue and created a community managed channel that solves the channel mixing issues associated with default conda channels. This community managed channel is called conda-forge.\nConda-forge has thousands of contributors and functions very similar to PyPi (pip’s central package repository). Conda-forge mandates that your dependencies all be installed via conda-forge or the default channels. By requiring packages to be installed via conda-forge by default, any package installed via conda-forge should not have issues with mixing channels of dependencies.\nConda-forge aims to do better than PyPi by providing an automated testing suite along with more peer review of code before it is published. These extra rules make conda-forge an ideal choice for creating Python environments for science.\nIf you are a scientist, we suggest that you use conda-forge to install all needed packages. Using a consistent conda channel will save time in the long run as you list of packages and associated dependencies grows."
  },
  {
    "objectID": "install-python/get-started-python.html",
    "href": "install-python/get-started-python.html",
    "title": "Install and Get Started Using Python",
    "section": "",
    "text": "Install Python Using Conda & Conda-forge - Mambaforge\n\n\nLearn how to install Python using conda and the conda-forge channel. Using conda is the best way to minimize issues when setting up Python for scientific use.\n\n\n\nLeah Wasser, Jenny Palomino\n\n\nFeb 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImport & Work With Python Packages\n\n\n\n\n\n\nLeah Wasser, Jenny Palomino\n\n\nFeb 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Create a Conda Environment For Your Python Workflow\n\n\n“Learn how to create a reproducible conda environment using environment.yml files. Best practices for scientists who want to create a Python environment containing different…\n\n\n\nLeah Wasser, Jenny Palomino\n\n\nFeb 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips and tricks for checking your Python Environment\n\n\nLearn some helpful tricks to troubleshoot issues with your Python conda environment.”\n\n\n\nLeah Wasser\n\n\nFeb 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Conda is Better for Scientific Environments\n\n\nA conda environment is a self contained Python environment that allows you to run different versions of Python (with different installed packages) on your computer. Learn…\n\n\n\nWill Norris, Leah Wasser\n\n\nFeb 12, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "install-python/install-python-conda.html",
    "href": "install-python/install-python-conda.html",
    "title": "Install Python Using Conda & Conda-forge - Mambaforge",
    "section": "",
    "text": "Learning Objectives\n\n\n\n\nAt the end of this activity, you will be able to:\n\nInstall the lightweight Mambaforge Python distribution which uses the conda-forge channel as a default.\n\n What You Need\nBefore you start this lesson, be sure that you have a computer with internet access."
  },
  {
    "objectID": "install-python/install-python-conda.html#what-to-install---mambaforge-python-distribution",
    "href": "install-python/install-python-conda.html#what-to-install---mambaforge-python-distribution",
    "title": "Install Python Using Conda & Conda-forge - Mambaforge",
    "section": "What to install - mambaforge Python distribution",
    "text": "What to install - mambaforge Python distribution\nWhile you can install any distribution that you wish, we suggest that you install the mambaforge distribution. Mambaforge is a light weight Python distribution that installs both Python and a subset of the core packages. It uses the conda-forge conda channel. This channel is ideal for installing scientific tools and will result in cleaner, easier to use environments with fewer conflicts.\n\n\n\n\n\n\nThe many other ways to install Python\n\n\n\nYou can also install Python by:\n\nUsing Homebrew\nInstalling the entire Anaconda distribution: This is a large distribution maintained by Anaconda, Inc. It is not recommended for your initial setup as\n\nIt has many additional packages that you might not need.\nBecause it installs using the default conda channel it also could result in dependency conflicts if you have other scientific packages that you may want to install using the conda-forge channel.\n\nUsing Miniconda: The miniconda distribution, also provided by Anaconda, Inc is a smaller distribution than Anaconda. While it hs fewer packages and is smaller in size than the Anaconda, this distribution still installs packages using the conda defaults channel. This means that you may still encounter environmentl conflicts if you use it. Thus we still recommend that you install mambaforge.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are a GIS user and on some versions of the MAC operating system, you will also find an existing Python distribution on your computer. a quick way to figure out if Python already exists on your computer is to open up terminal or bash and run:\nwhich python\n\n\nFor scientific Python applications, it’s best for you to install a lightweight Python distribution rather than\nIn this lesson, you will learn how to install the mambaforge Python distribution on your computer."
  },
  {
    "objectID": "install-python/install-python-conda.html#why-install-mambaforge-instead-of-miniconda-or-anaconda",
    "href": "install-python/install-python-conda.html#why-install-mambaforge-instead-of-miniconda-or-anaconda",
    "title": "Install Python Using Conda & Conda-forge - Mambaforge",
    "section": "Why Install Mambaforge instead of Miniconda or Anaconda",
    "text": "Why Install Mambaforge instead of Miniconda or Anaconda\nYou also learned that the conda package manager allows you to install Python packages on your computer as well as create and manage multiple Python environments, each containing different packages.\nThere are 4 different distributions that you may wish to select from. To keep things simple, we suggest that you install mambaforge distribution. This distribution is preferred because:\n\nmamba is developed in C++ and will build your environments much faster than conda\nthe default conda channel is conda-forge which is the preferred channel for science\nit’s much smaller than the anaconda distribution\n\nBelow is a quick comparison of all 4 distributions.\n\n\n\n\n\n\n\n\n\n\nTool\nMambaforge\nMiniforge\nAnaconda\nMiniconda\n\n\n\n\nSize\n~62mb\n~42MB\nLarge ~2GB\nSmall ~43MB\n\n\nWhat’s installed\nConda, Core Python + Mamba\nConda, Core Python\nInstalls Anaconda Navigator, Spyder, and many other tools that may not be needed\nConda, Core Python\n\n\nDefault conda channel\nconda-forge\nconda-forge\nconda default\nconda default\n\n\nDefault tool manager \nmamba\nconda\nconda\nconda"
  },
  {
    "objectID": "install-python/install-python-conda.html#install-mambaforge-from-the-conda-forge-channel",
    "href": "install-python/install-python-conda.html#install-mambaforge-from-the-conda-forge-channel",
    "title": "Install Python Using Conda & Conda-forge - Mambaforge",
    "section": "Install Mambaforge from the conda-forge channel",
    "text": "Install Mambaforge from the conda-forge channel\n\n\n\n\n\n\nFor Anaconda Users\n\n\n\nIf you want to use mambaforge, we strongly suggest that you uninstall Anaconda. If you have environments that you are woried about losing, then you can install mambaforge following the instructions listed below to overwrite the default conda channels.\n\n\n\nInstallation instructions by operating system\n\nMacLinuxWindows\n\n\n\n\n\n\n\n\nFor homebrew Users\n\n\n\nIf you have homebrew installed, then the easiest way to install mambaforge is to use:\nbrew install mambaforge\nFind directions for installing homebrew here.\n\n\nIf you don’t have homebrew, you can download a mamba installer and use bash to install it.\n\nDownload the installer: Mambaforge installer for Mac. Note that if you have a newer mac with a m1 or m2 chip, then you will want to install the Apple Silicon version:\n\nOS X   arm64 (Apple Silicon)   Mambaforge-MacOSX-arm64\nIf you have an older mac use\nOS X   x86_64  Mambaforge-MacOSX-x86_64\n\nIn your Terminal window, cd to the location of the download file. Run:\n\nbash Mambaforge3-latest-MacOSX-modify-filename-here.sh.\n\nFollow the prompts on the installer screens.\nIf you are unsure about any setting, accept the defaults. You can change them later.\nTo make sure that the changes take effect, close and then re-open your Terminal window.\n\nOnce you are done you can test that the install worked.\n\nTest your install on Mac\n\nSearch for and open the Terminal program (found in /Applications/Utilities). In this Terminal window, type bash and hit enter. If you do not get a message back, then Bash is available for use.\nNext, type git and hit enter. If you see a list of commands that you can execute, then Git has been installed correctly.\nNext, type conda and hit enter. Again, if you see a list of commands that you can execute, then Mambaforge Python has been installed correctly.\nClose the Terminal by typing exit.\n\n\n\n\n\nDownload the installer: Mambaforge installer for Linux.\nIn your Terminal window, run making sure to modify the file name to match the file that you downloaded:\n\nbash Mambaforge3-latest-Linux-modify-file-name-here.sh.\n\nFollow the prompts on the installer screens.\nIf you are unsure about any setting, accept the defaults. You can change them later.\nTo make sure that the changes take effect, close and then re-open your Terminal window.\n\nOnce you are done, you can test that your install worked.\n\nTest your install on Linux\n\nSearch for and open the Terminal program. In this Terminal window, type bash and hit enter. If you do not get a message back, then Bash is available for use.\nNext, type git and hit enter. If you see a list of commands that you can execute, then Git has been installed correctly.\nNext, type conda and hit enter. Again, if you see a list of commands that you can execute, then Mambaforge Python has been installed correctly.\nClose the Terminal by typing exit.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWindows Users: if you already have Anaconda installed, then you will be asked to confirm that you want to make the Mambaforge installation the default conda on your computer when you follow step 6 of the Mambaforge installation.\n\n\nDownload the Mambaforge installer for Windows.\nRun the installer by double-clicking on the downloaded file and follow the steps below.\n\nClick “Run”.\nClick on “Next”.\nClick on “I agree”.\nLeave the selection on “Just me” and click on “Next”.\nClick on “Next”.\nSelect the first option for “Add Anaconda to my PATH environment variable” and also leave the selection on “Register Anaconda as my default Python 3.x”. Click on “Install”.\n\nNote that even though the installation is for Mambaforge, the installer uses the word Anaconda in these options.\nYou will also see a message in red text that selecting “Add Anaconda to my PATH environment variable” is not recommended; continue with this selection to make using conda easier in Git Bash. If you have questions or concerns, please contact your instructor.\n\nWhen the install is complete, Click on “Next”.\nClick on “Finish”.\n\nOnce you are done, you can test that the installation worked.\n\nTest your install on Windows\n\nSearch for and open the Git Bash program. In this Terminal window, type bash and hit enter. If you do not get a message back, then Bash is available for use.\nNext, type git and hit enter. If you see a list of commands that you can execute, then Git has been installed correctly.\nNext, type conda and hit enter. Again, if you see a list of commands that you can execute, then Mambaforge Python has been installed correctly.\nClose the Terminal by typing exit."
  },
  {
    "objectID": "install-python/python-environment-tips.html",
    "href": "install-python/python-environment-tips.html",
    "title": "Tips and tricks for checking your Python Environment",
    "section": "",
    "text": "We’ve all been there… trying to import a package and python can’t find it? Below are a few tricks to figure out what environment you are in!\nThis can be useful when troubleshooting code that is not running as you expect!"
  },
  {
    "objectID": "install-python/python-environment-tips.html#print-your-current-local-environment",
    "href": "install-python/python-environment-tips.html#print-your-current-local-environment",
    "title": "Tips and tricks for checking your Python Environment",
    "section": "Print your current local environment",
    "text": "Print your current local environment\nthis is a good trick for when you’re working in Python and something seems wrong with your environment. It could be that you are in a different environment than you think you are!\nPython to the rescue!\nThe code snippet below will print the conda environment name to help you troubleshootz.\n\nimport os\n#print(os.environ['CONDA_DEFAULT_ENV'])\nos.environ.keys\n\n<bound method Mapping.keys of environ({'CI': 'true', 'CONDA_DIR': '/opt/conda', 'DENO_DOM_PLUGIN': '/opt/quarto/bin/tools/deno_dom/libplugin.so', 'DENO_NO_UPDATE_CHECK': '1', 'GITHUB_ACTION': '__run_2', 'GITHUB_ACTIONS': 'true', 'GITHUB_ACTION_REF': '', 'GITHUB_ACTION_REPOSITORY': '', 'GITHUB_ACTOR': 'lwasser', 'GITHUB_ACTOR_ID': '7649194', 'GITHUB_API_URL': 'https://api.github.com', 'GITHUB_BASE_REF': '', 'GITHUB_ENV': '/__w/_temp/_runner_file_commands/set_env_20599c42-9102-49f6-bf2c-d7e4570fab79', 'GITHUB_EVENT_NAME': 'push', 'GITHUB_EVENT_PATH': '/github/workflow/event.json', 'GITHUB_GRAPHQL_URL': 'https://api.github.com/graphql', 'GITHUB_HEAD_REF': '', 'GITHUB_JOB': 'build-website', 'GITHUB_OUTPUT': '/__w/_temp/_runner_file_commands/set_output_20599c42-9102-49f6-bf2c-d7e4570fab79', 'GITHUB_PATH': '/__w/_temp/_runner_file_commands/add_path_20599c42-9102-49f6-bf2c-d7e4570fab79', 'GITHUB_REF': 'refs/heads/main', 'GITHUB_REF_NAME': 'main', 'GITHUB_REF_PROTECTED': 'false', 'GITHUB_REF_TYPE': 'branch', 'GITHUB_REPOSITORY': 'data-science-skills/dss-web', 'GITHUB_REPOSITORY_ID': '600898590', 'GITHUB_REPOSITORY_OWNER': 'data-science-skills', 'GITHUB_REPOSITORY_OWNER_ID': '125224243', 'GITHUB_RETENTION_DAYS': '90', 'GITHUB_RUN_ATTEMPT': '1', 'GITHUB_RUN_ID': '8025946523', 'GITHUB_RUN_NUMBER': '104', 'GITHUB_SERVER_URL': 'https://github.com', 'GITHUB_SHA': 'a6d0729b48ee4f6405b5f5077db07c6deac18755', 'GITHUB_STATE': '/__w/_temp/_runner_file_commands/save_state_20599c42-9102-49f6-bf2c-d7e4570fab79', 'GITHUB_STEP_SUMMARY': '/__w/_temp/_runner_file_commands/step_summary_20599c42-9102-49f6-bf2c-d7e4570fab79', 'GITHUB_TRIGGERING_ACTOR': 'lwasser', 'GITHUB_WORKFLOW': 'Build DSS website', 'GITHUB_WORKFLOW_REF': 'data-science-skills/dss-web/.github/workflows/build-site.yml@refs/heads/main', 'GITHUB_WORKFLOW_SHA': 'a6d0729b48ee4f6405b5f5077db07c6deac18755', 'GITHUB_WORKSPACE': '/__w/dss-web/dss-web', 'GOLANG_ARCH': 'amd64', 'GOLANG_OS': 'linux', 'GOLANG_VERSION': '1.17', 'HOME': '/github/home', 'HOSTNAME': '06414dbc119a', 'LANG': 'C.UTF-8', 'LC_ALL': 'C.UTF-8', 'MPLBACKEND': 'module://matplotlib_inline.backend_inline', 'PATH': '/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin', 'PWD': '/__w/dss-web/dss-web', 'QUARTO_BIN_PATH': '/opt/quarto/bin', 'QUARTO_DENO': '/opt/quarto/bin/tools/deno-x86_64-unknown-linux-gnu/deno', 'QUARTO_FILTER_DEPENDENCY_FILE': '/tmp/quarto-session47b89625/7c293ecb/898d782c', 'QUARTO_PROFILE': '', 'QUARTO_PROJECT_DIR': '/__w/dss-web/dss-web/dsk', 'QUARTO_ROOT': '/', 'QUARTO_SHARE_PATH': '/opt/quarto/share', 'RUNNER_ARCH': 'X64', 'RUNNER_ENVIRONMENT': 'github-hosted', 'RUNNER_NAME': 'GitHub Actions 4', 'RUNNER_OS': 'Linux', 'RUNNER_TEMP': '/__w/_temp', 'RUNNER_TOOL_CACHE': '/__t', 'RUNNER_WORKSPACE': '/__w/dss-web', 'SHLVL': '2', '_': '/opt/quarto/bin/tools/deno-x86_64-unknown-linux-gnu/deno', 'QUARTO_FIG_WIDTH': '7', 'QUARTO_FIG_HEIGHT': '5', 'QUARTO_FIG_DPI': '192', 'QUARTO_FIG_FORMAT': 'png', 'PYDEVD_USE_FRAME_EVAL': 'NO', 'JPY_PARENT_PID': '225', 'TERM': 'xterm-color', 'CLICOLOR': '1', 'FORCE_COLOR': '1', 'CLICOLOR_FORCE': '1', 'PAGER': 'cat', 'GIT_PAGER': 'cat'})>"
  },
  {
    "objectID": "install-python/python-environment-tips.html#print-information-about-a-specific-package",
    "href": "install-python/python-environment-tips.html#print-information-about-a-specific-package",
    "title": "Tips and tricks for checking your Python Environment",
    "section": "Print information about a specific package",
    "text": "Print information about a specific package\n…when you are developing tools you may want to make sure your package is installed in editable mode…"
  },
  {
    "objectID": "install-python/create-conda-environment.html",
    "href": "install-python/create-conda-environment.html",
    "title": "How to Create a Conda Environment For Your Python Workflow",
    "section": "",
    "text": "In this lesson, you will learn how to install a conda environment from a environment.yml file. You will create and install a conda environment called geo-python. You can customize and rename this environment however you wish.\n\n\n\n\n\n\nLearning Objectives\n\n\n\nAt the end of this activity, you will be able to:\n\nInstall a new environment using mamba env create.\nView a list of the available conda environments using mamba env list.\nActivate, update and delete conda environments using mamba. You should have Bash and the Miniconda distribution of Python 3.x setup on your computer. Be sure that you have:\nInstalled a conda Python distribution (preferably miniforge but this lesson will work with any conda distribution)\nInstalled mamba\nHave Bash / Terminal working on your computer. Click here if you haven’t setup bash yet.\n\n\n\nYou should have Bash and the Miniforge distribution of Python 3.x setup on your compute.\nBe sure you have:\n\nCompleted the setup for Git, Bash and Conda.\n\n\n\n\n\n\nConda allows you to have different environments installed on your computer to access different versions of Python and different libraries.\nThis is helpful as:\n\nIt allows you to have individual environments that are specific to particular workflows and projects\nIt allows you to install things in a contained environment that doesn’t interfere or cause conflicts with other environments on your computer\nIt allows you to to test workflows on different versions of python on your computer.\n\n\n\n\nThe termininolgy around conda vs mamba can a bit confusing when you are just getting strated.\nAnaconda: Anaconda, inc is a company that has a Python distribution called Anaconda. This distribution contains numerous packages and tools and is close to 2GB in size. Anaconda cloud: the anaconda cloud (anaconda.org) is a package repository (similar to pyPI) where conda packages are stored. The cloud has numerous channels or sub repositories including the default channel, conda-forge and bioconda. conda-forge is the most commonly used channel for scientific tools. Conda: is a package management tool that can be used to install packages from the anaconda cloud. Mamba: is a package management tool that is similar to conda, but because it’s built using C++, it’s much faster. I suggest that you use mamba instead of conda for all commands given it will be much faster when you installed an environment or new packages into your environment.\nFor this lesson, I assume that you’ve installed Python using mambaforge. If you have another distribution sucha s minconda, or miniforge, you may need to install mamba for the commands below to work.\nAlternatively you can swap out conda for mamba to run all of the commands below! Just note that installation time for your environment will be much slower if you use conda!\nNote that it will take a significantly longer time to install of the packages found in the geo-python environment using conda vs mamba! Also, note that you need to have internet access to install packages as conda and conda-forge are online repositories!\n\n\n\nIn this lesson you can either chose to create your own environment file, or you can use an existing environment that is available on GitHub!\nIf you wish to start with an existing environment, you can follow the instructions below:\n\nFork and clone a GitHub repository from https://github.com/lwasser/geo-python to a location on your computer.\n\nThis repository contains a file called environment.yml that contains the instructions to install the environment.\n\nIf it’s not already open, open the Terminal on your computer (e.g. Git Bash for Windows or Terminal on a Mac/Linux).\nIn the Terminal, set your directory to the cloned geo-python dir using cd to change directories (e.g. cd geo-python).\nOnce you are in the geo-python directory, you can create your environment. To do this run: mamba env create -f environment.yml.\n\nOnce the environment is installed you can activate it using: mamba activate geo-python.\n\nTo view a list of all conda environments available on your machine run: mamba info --envs.\n\nNote that it takes time to install of the packages found in the geo-python environment as it needs to download and install each library. Also, you need to have internet access for this to run!\n\n\n\n\n\n\nNote\n\n\n\nThe instructions above will only work if you run them in the directory where you placed the environment.yml file.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n Windows Users: A reminder that the lessons on this website assume that you are using Git Bash as your primary terminal.\n\n\n\n\n\n\n\nWhen you work with conda, you can create custom lists that tell conda where to install libraries from, and in what order. You can even specify a particular version.\nYou write this list using YAML (Yet Another Markup Language). This is an alternative to using pip to install Python packages.\nIn previous steps, you used a custom .yml list to install all of the Python libraries that you will need to complete the Python lessons on this website. This .yml list is customized to install libraries from the repositories and in an order that minimizes conflicts.\nIf you run into any issues installing the environment from the .yml, let us know!\nNext, explore your new conda environment. Here’s what part of the .yml file looks like:\n\n\nenvironment.yml\n\nname: geo-python\nchannels:\n  - conda-forge\n  - defaults\n\ndependencies:\n  - python=3.7\n  - pip\n  # Core scientific python\n  - numpy\n  - matplotlib\n\nNotice at the top of the file there is the environment name. This file has a few key parts:\n\nName: the name of the environment that you will call when you want to activate the environment. The name geo-python is defined in the environment.yml file.\nChannels: this list identifies where packages will be installed from. There are many options including conda, conda-forge and pip. You will be predominately using conda-forge for the geo-python environment.\nDependencies: Dependencies are all of the things that you need installed in order for the environment to be complete. In the example, Python version 3.7 is specified. The order in which the libraries should be installed is also specified.\n\n\n\n\n\nYou can have different Python environments on your computer. Conda allows you to easily jump between environments using a set of commands that you run in your terminal.\nThis section provides an overview of various commands to manage your conda environments.\nFor more detailed instructions for using these commands, see Installing Python Packages in Conda Environments.\nOr, have a look at the Conda documentation notes that review the steps below and more!\n\n\nYou can see a list of all installed conda environments by typing:\n\nconda info --envs\nIf you want to use a particular environment that you have installed on your computer, you need to activate it.\nFor example, if a Python package such as geopandas is only installed in the geo-python environment, and not the default conda environment, you will not be able to access it (e.g. import it to Jupyter Notebook), unless you have the geo-python environment activated.\n\n\n\nTo activate an environment, use the Terminal to navigate to your earth-analytics directory (e.g. cd to the directory). Then, type the following command to activate the environment (e.g. geo-python):\nmamba activate geo-python\nFor older installations of conda (versions prior to 4.6) on Mac, Linux, and Git Bash for Windows, type:\nsource activate geo-python\n Windows Users: The first time that you try to run the “mamba activate” command, you may be asked to configure Git Bash to use “mamba activate”. You can do this by running the command “conda init bash”, just one time. After that, Git Bash will be configured to use “mamba activate” moving forward.\nOnce the environment is activated, the name of the activated environment will appear in parentheses on the left side of your terminal (e.g. (geo-python).\n\n\n\n\n\n\nData Tip\n\n\n\nNote that after you restart the Terminal, the geo-python environment is no longer active. You will need to activate the geo-python environment each time you start the Terminal by running the appropriate command provided above for your operating system.\n\n\n\n\n\nIf needed, you can deactivate a conda environment. Deactivating the environment switches you back to the default environment in your computer.\nconda deactivate\n\n\n\nIf you ever want to delete an environment, you must first deactivate that environment and then type:\nmamba env remove --name myenv\nand replace myenv with the name of the environment that you want to remove.\nRemember to never delete your root environment.\n\n\n\nOnce you have created a conda environment, you can update it anytime by first activating the environment and then running the mamba env update command.\nThe example below updates the geo-python environment using the environment.yml file. In this example, the command mamba env update is run in the same directory that contains the environment.yml file.\n$ mamba activate geo-python\n$ mamba env update -f environment.yml\nRunning this command will update your current geo-python environment to include the most current versions of the packages listed in that environment file.\nConda Resources:\n\nConda documentation for installing conda\nmanaging mamba environments."
  },
  {
    "objectID": "install-python/python-packages.html",
    "href": "install-python/python-packages.html",
    "title": "Import & Work With Python Packages",
    "section": "",
    "text": "Import and Install Python Packages for Science\n\n\n\nLearn about managing Python packages in your code.\n\n\nAfter completing this chapter, you will be able to:\n\nExplain what a package is in Python.\nImport a package into Python.\nList important Python packages for science.\n\n\n\n\nYou should have Bash and Conda setup on your computer and a conda environment such as geo-python. Follow the Setup Git, Bash, and Conda on your computer to install these tools."
  },
  {
    "objectID": "install-python/python-packages.html#what-is-a-python-package",
    "href": "install-python/python-packages.html#what-is-a-python-package",
    "title": "Import & Work With Python Packages",
    "section": "What is a Python Package",
    "text": "What is a Python Package\nIn Python, a package is a bundle of pre-built functionality that adds to the functionality available in base Python. Base Python can do many things such as perform math and other operations. However, Python packages can significantly extend this functionality.\nYou can think of a Python package as a toolbox filled with tools. The tools in the toolbox can be used to do things that you would have to otherwise hand code in base Python. These tasks are things that many people might want to do in Python, thus warranting the creation of a package. After all, it doesn’t make sense for everyone to hand code everything!\nFor example, the matplotlib package allows you to create plots of data. Since most of us create plots routinely, having a Python package to create plots makes programming more efficient for everyone who needs to create plots."
  },
  {
    "objectID": "install-python/python-packages.html#open-source-python-packages-for-earth-and-environmental-data-science",
    "href": "install-python/python-packages.html#open-source-python-packages-for-earth-and-environmental-data-science",
    "title": "Import & Work With Python Packages",
    "section": "Open Source Python Packages for Earth and Environmental Data Science",
    "text": "Open Source Python Packages for Earth and Environmental Data Science\nThere are many different packages available for Python. Some of these are optimized for scientific tasks such as:\n\nStatistics\nMachine learning\nUsing geospatial data\nPlotting & visualizing data\nAccessing data programmatically\n\nand more! The list below contains a few core packages that are often used by scientists as examples.\n\nos: handle files and directories.\nglob: create lists of files and directories for batch processing.\nmatplotlib: plot data.\nnumpy: work with data in array formats (often related to imagery and raster format data).\npandas: work with tabular data in a DataFrame format.\nrioxarray: work with raster (image and arrays) data using XArray and rioxarray approaches.\ngeopandas: work with vector format (shapefiles, geojson - points, lines and polygons) using a geodataframe format."
  },
  {
    "objectID": "install-python/python-packages.html#where-do-packages-live-on-your-computer",
    "href": "install-python/python-packages.html#where-do-packages-live-on-your-computer",
    "title": "Import & Work With Python Packages",
    "section": "Where Do Packages Live On Your Computer?",
    "text": "Where Do Packages Live On Your Computer?\nPackages are organized directories of code that can be installed and then imported to your code file (e.g. .py script, Jupyter Notebook file).\nWhen you install a package, you may be wondering, where does it go? If you are using mambaforge on a Mac, the packages that you install are located in your mambaforge directory under envs (e.g. /home/username/mambaforge/envs/).\nWhen you install a package into the conda environment of your choice. For example, geo-python that you installed in this tutorial series will end up in the /home/username/mambaforge/envs/geo-python folder.\n\n\n\n\n\nWhen you install Python packages in an conda environment, they will be located within the /home/username/mambaforge/envs/environment-name directory.\n\n\nOnce packages are installed in your Python environment (e.g. geo-python conda environment), you can call them in Python at the command line, in a script (.py file), or in a Jupyter Notebook file.\nYou have to explicitly call and load (i.e. import) each package that you want to use in your script (.py file) or Jupyter Notebook file, in order for the functions (or tools) in that package to be available for use in your code.\n\n\n\n\n\n\nData Tip You can import Python packages using import package-name. Once a package has been imported, you can call functions from that package\n\n\n\n\n\n\n\nPython Packages Can Contain Modules\nPackages can contain many modules (i.e. units of code) that each provide different functions and can build on each other. For example, the matplotlib package provides functionality to plot data using modules, one of which is the commonly used module called pyplot.\nEvery Python package should have a unique name. This allows you to import the package using the name with the import command.\nFor example, the command below imports the matplotlib package.\nimport matplotlib\n\n\nWhat is a Module in a Python Package?\nPackages often have modules. A module is a set of related functionality that lives within the package.\nFor example, pyplot is a module within the matplotlib package that makes it easier to quickly set up plots.\nYou can import a specific module like pyplot by first calling the package name and then the module name - using . to separate the names like this:\nimport matplotlib.pyplot\nYou can also import the module using an alias or short name, such as plt for matplotlib.pyplot.\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "use-git-github/setup-git-bash.html",
    "href": "use-git-github/setup-git-bash.html",
    "title": "Setup Bash on Windows, Mac and Linuxs Operating Systems",
    "section": "",
    "text": "“Leah Wasser”\n“Jenny Palomino”"
  },
  {
    "objectID": "use-git-github/setup-git-bash.html#bash-setup",
    "href": "use-git-github/setup-git-bash.html#bash-setup",
    "title": "Setup Bash on Windows, Mac and Linuxs Operating Systems",
    "section": "Bash Setup",
    "text": "Bash Setup\n\nMac OS XLinuxWindows\n\n\nThe default shell in all versions of Mac OS X is Bash, so no need to install anything. You access Bash from the Terminal (found in /Applications/Utilities). You may want to keep Terminal in your dock for this workshop.\n\n\nThe default shell is usually Bash but if your machine is set up differently you can run it by opening the Terminal and typing: bash. There is no need to install anything.\n\n\nDownload the Git for Windows installer.\nRun the installer by double-clicking on the downloaded file and by following the steps below:\n\nClick on “Run”.\nClick on “Next”.\nClick on “Next”.\nClick on “Next”.\nClick on “Next”.\nClick on “Next”.\nLeave the selection on “Git from the command line and also from 3rd party software” and click on “Next”. NOTE: If you forgot to do this, the programs that you need for the workshop will not work properly. If this happens, rerun the installer and select the appropriate option.\nClick on “Next”.\nLeave the selection on “Checkout Windows-style, commit Unix-style line endings” and click on “Next”.\nSelect the second option for Use Windows’ default console window and click on “Next”.\nClick on “Next”.\nClick on “Install”.\nWhen the install is complete, click on “Finish”.\n\nThis installation will provide you with both Git and Bash within the Git Bash program."
  },
  {
    "objectID": "use-git-github/setup-git-bash.html#git-setup",
    "href": "use-git-github/setup-git-bash.html#git-setup",
    "title": "Setup Bash on Windows, Mac and Linuxs Operating Systems",
    "section": "Git Setup",
    "text": "Git Setup\nGit is a version control system that lets you track who made changes to what and when, and it has options for easily updating a shared or public version of your code on GitHub.\nYou will need a supported web browser (current versions of Chrome, Firefox or Safari, or Internet Explorer version 9 or above).\nGit installation instructions borrowed and modified from Software Carpentry.\n\nMac OS XGit on LinuxGit for Windows\n\n\nVideo Tutorial\nInstall Git on Macs by downloading and running the most recent installer for “mavericks” if you are using OS X 10.9 and higher -or- if using an earlier OS X, choose the most recent “snow leopard” installer, from this list.\nAfter installing Git, there will not be anything in your /Applications folder, as Git is a command line program.\n\n\n\n\n\n\nData Tip\n\n\n\nIf you are running Mac OSX El Capitan, you might encounter errors when trying to use Git. Make sure you update XCODE. Read more - a Stack Overflow Issue.\n\n\n\n\nIf Git is not already available on your machine, you can try to install it via your distro’s package manager. For Debian/Ubuntu, run sudo apt-get install git and for Fedora run sudo yum install git.\n\n\nGit was installed on your computer as part of your Bash install."
  }
]